Docker Volumes

Problem Statement
It is a very common requirement to persist the data in a Docker container beyond the lifetime of the container. However, the file system of a Docker container is deleted/removed when the container dies.

Solution
There are 2 different ways how docker solves this problem.

Volumes
Bind Directory on a host as a Mount

Volumes
Volumes aims to solve the same problem by providing a way to store data on the host file system, separate from the container's file system, so that the data can persist even if the container is deleted and recreated.
  
Volumes can be created and managed using the docker volume command. You can create a new volume using the following command:
docker volume create <volume_name>
  
Once a volume is created, you can mount it to a container using the -v or --mount option when running a docker run command.
For example:
docker run -it -v <volume_name>:/data <image_name> /bin/bash
  
This command will mount the volume <volume_name> to the /data directory in the container. Any data written to the /data directory inside the container will be persisted in the volume on the host file system.

Bind Directory on a host as a Mount
Bind mounts also aims to solve the same problem but in a complete different way.

Using this way, user can mount a directory from the host file system into a container. Bind mounts have the same behavior as volumes, but are specified using a host path instead of a volume name.

For example,

docker run -it -v <host_path>:<container_path> <image_name> /bin/bash

#practice
  docker volume ls
  docker volume create volume1
  u can dedicate this partition/specificvolume to one conatiner or multiple container 
  volume-logical partition -folder/file system on a specific host
  docker volume inspect volume1 -all details
  docker volume rm volume1 -remove
  docker volume rm volume1 volume2
  docker images
  docker build -t volume-demo .
  docker run -d --mount source=volume1, target=/app nginx:latest
  docker ps
  docker inspect cid/cname
  stop c,delete c,delete volume

  docker -v <src:dest>
  docker --mount #both same mount is more verbose -more information

  bind mounts and volumes

  bind a directory inside your container and on the host 
  specific to host

  volumes-dockercli-logical partition u created on a host
  same host/other external storage device
  high performance
  not specific to host
  more preferable
  
  
  
  
  
  
  
